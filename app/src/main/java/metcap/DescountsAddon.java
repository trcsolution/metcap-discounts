/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package metcap;
import java.math.BigDecimal;

import org.apache.fop.pdf.StandardStructureTypes.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.sap.scco.ap.plugin.BasePlugin;
import com.sap.scco.ap.plugin.annotation.PluginAt;
import com.sap.scco.ap.pos.dao.CDBSession;
import com.sap.scco.ap.pos.dao.CDBSessionFactory;
import com.sap.scco.ap.pos.entity.BaseEntity.EntityActions;
import com.sap.scco.ap.pos.entity.BusinessPartnerEntity;
import com.sap.scco.ap.pos.entity.ReceiptEntity;
import com.sap.scco.ap.pos.entity.SalesItemEntity;
import com.sap.scco.ap.pos.service.ServiceFactory;
import com.sap.scco.ap.pos.service.CalculationPosService;
import com.sap.scco.ap.pos.service.ReceiptChangeNotifierPosService;
import com.sap.scco.ap.pos.service.ReceiptPosService;
import com.sap.scco.ap.pos.service.component.listener.ReceiptChangeListener;
import com.sap.scco.env.UIEventDispatcher;
import com.sap.scco.util.CConst;
import com.sap.scco.ap.pos.entity.SalesItemNoteEntity;



public class DescountsAddon extends BasePlugin implements ReceiptChangeListener {
    private static Logger logger = LoggerFactory.getLogger(DescountsAddon.class);
    private ReceiptChangeNotifierPosService notifierService;
    private CalculationPosService calculationPosService;
    private CDBSession dbSession;

    @Override
    public String getId() {
        return "MetCapCoupons";
    }

    @Override
    public String getName() {
        return "MetCap Coupons Promo";
    }
    

    @Override
    public String getVersion() {
        return "1.0.0";
    }

    @Override
    public void startup() {
        this.dbSession = CDBSessionFactory.instance.createSession();
        this.notifierService =ServiceFactory.INSTANCE.getOrCreateServiceInstance(ReceiptChangeNotifierPosService.class,dbSession);
        this.calculationPosService = ServiceFactory.INSTANCE.getOrCreateServiceInstance(CalculationPosService.class,dbSession);
        notifierService.registerChangeListener(this);
        
    }

    void ApplyDiscount(com.sap.scco.ap.pos.entity.ReceiptEntity receipt)
    {
        //This function clear tax items for the sales item
          try {
                                                // Update the discount for each sales item
                                                // List<SalesItemEntity> salesItems = receipt.getSalesItems();
                                                // for (SalesItemEntity salesItem : salesItems) {
                                                //                 salesItem.setDiscountNetAmount(new BigDecimal(2.00));
                                                //                 salesItem.setPaymentNetAmount(new BigDecimal(19.99));
                                                                
                                                //                 salesItem.setDiscountManuallyChanged(true);

                                                //                 // true - avoid  CCO to automatically calculate native discounts!
                                                //                 salesItem.setDiscountManuallyChanged(true);
                                                //                 salesItem.setMarkChanged(true);
                                                //                 salesItem.setItemDiscountChanged(true);

                                                // }
 
                                                // Use calculationPosService to recalculate transaction
                                                calculationPosService.calculate(receipt, EntityActions.CHECK_CONS);

                                                UIEventDispatcher.INSTANCE.dispatchAction(CConst.UIEventsIds.RECEIPT_REFRESH, null, receipt);
 
                                                logger.info("Discount calculation and receipt refresh successful.");
 
                                } catch (Exception e) {
                                                logger.error("Error occurred while calculating discount and refreshing receipt:", e);
            
                                            }
        
    }

    //this event when you add item into transaction
    public  void onSalesItemAddedToReceipt(com.sap.scco.ap.pos.dao.CDBSession dbSession, com.sap.scco.ap.pos.entity.ReceiptEntity receipt, java.util.List<com.sap.scco.ap.pos.entity.SalesItemEntity> salesItems, java.math.BigDecimal quantity) {
        ApplyDiscount(receipt);
    }
    //this event here when you updating ite price, qty etc...
    public void onSalesItemUpdated(com.sap.scco.ap.pos.dao.CDBSession dbSession, com.sap.scco.ap.pos.entity.ReceiptEntity receipt, com.sap.scco.ap.pos.entity.SalesItemEntity newSalesItem, java.math.BigDecimal quantity) {
        ApplyDiscount(receipt);

    }

    //this is happened when changing customer for transaction
    @PluginAt(pluginClass = ReceiptPosService.class, method = "setBusinessPartner", where = PluginAt.POSITION.AFTER)
    public Object setBusinessPartner(Object proxy, Object[] args, Object ret, StackTraceElement caller)
    {
        //this is our db session
        var dbSession =((ReceiptPosService)proxy);
       // this is our receipt
        var receipt=(ReceiptEntity)args[0];

        //this is customer for the transaction
        var customer=(BusinessPartnerEntity)args[1];
        //this group code
        var customergroup=customer.getCustomerGroupCode();
        
        //here we are checking is trcpromo now!!!! 
        var trcPROMOID=receipt.getSalesItems().get(0).getAdditionalField("PromoId");
        if(trcPROMOID!=null)
        logger.info(trcPROMOID.getValue());
        
        return null;

    }

    public static String getAdditionalField(SalesItemEntity entry,String fieldName)
    {
        var field=entry.getAdditionalField(fieldName);
        if(field==null)
          return null;
          var rslt=field.getValue();
          if(rslt==null)
           return null;
           return rslt.length()>0?rslt:null;
    }
    public static void ClearPromo(SalesItemEntity entry,boolean clearNote)
    {
        setAdditionalField(entry, com.trc.ccopromo.models.Constants.PROMO_ID,null);
        if(clearNote)
            AddNote(entry,null);
    
    }
    public static void  AddNote(SalesItemEntity salesItem,String key,String Text)
    {
        if(salesItem.getNotes()!=null)
            if(salesItem.getNotes().stream().anyMatch(a->a.getKey()==key))
        {
            salesItem.getNotes().stream().filter(a->a.getKey()==key).findFirst().get().setText(Text);
            salesItem.setNotes(salesItem.getNotes());
            return;
            
        }
        // else
        {
            salesItem.setNotes(null);
            if(Text==null)
            {
                // salesItem.setNotes(null);
                return;
            }
            // UUID uuid = UUID.randomUUID();
            SalesItemNoteEntity entity=new SalesItemNoteEntity();
            entity.setText(Text);
            entity.setKey(key);
            salesItem.addNote(entity);
            salesItem.setNotes(
                salesItem.getNotes()
                );
        }
        
    }
    



    

    public void onReceiptPost(com.sap.scco.ap.pos.dao.CDBSession dbSession, com.sap.scco.ap.pos.entity.ReceiptEntity receipt) {
        
        logger.info("POST-RECEIPT EVENT");
        var cpns=receipt.getCouponAssignments();
        if(cpns.size()>0)
        {
            //Get First Coupon
            var coupon=cpns.get(0).getCoupon();
            //Print Coupon Code
            logger.info(coupon.getCode());
            //Print Coupon Key
            logger.info(coupon.getKey());
            
            
        }
        logger.info(String.valueOf(cpns.size()));
        receipt.getPaymentItems().forEach(a ->{
            logger.info(a.getDescription());
            
        });;
        
        // new SalesController(this,dbSession).postReceipt(receipt);
    }

    
}
